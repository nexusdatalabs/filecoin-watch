---
export interface Props {
  data: Array<Record<string, unknown>>;
  x: string;
  y: string;
  label?: string;
  cid?: string;
}

const {
  data = [],
  x,
  y,
  label = "Series",
  cid: passedCid,
} = Astro.props as Props;

// Unique chart id per component instance
const cid = passedCid ?? `linechart-${Math.random().toString(36).slice(2, 10)}`;

const labels = (Array.isArray(data) ? data : [])
  .map((d) => (d && typeof d === "object" ? (d as any)[x] : undefined))
  .filter((v) => v !== undefined);

const values = (Array.isArray(data) ? data : []).map((d) =>
  d && typeof d === "object" ? Number((d as any)[y] ?? 0) : 0,
);
---

<div>
  <canvas
    id={cid}
    data-cid={cid}
    data-x={JSON.stringify(labels)}
    data-y={JSON.stringify(values)}
    data-label={label}
    height="280"
  >
  </canvas>
</div>

<script>
  import Chart from "chart.js/auto";

  // Initialize all LineChart canvases on the page
  const canvases = Array.from(
    document.querySelectorAll(
      "canvas[data-cid][data-x][data-y]:not([data-initialized])",
    ),
  ) as HTMLCanvasElement[];

  if (canvases.length === 0) {
    // Nothing to do
  }

  Chart.defaults.font.family = "JetBrains Mono, monospace";

  for (const canvas of canvases) {
    const x = JSON.parse(canvas.dataset.x || "[]");
    const y = JSON.parse(canvas.dataset.y || "[]");
    const label = canvas.dataset.label || undefined;

    const dataset: any = { data: y };
    if (label) dataset.label = label;

    new Chart(canvas as any, {
      type: "line",
      data: {
        labels: x,
        datasets: [
          {
            label: label || undefined,
            data: dataset.data,
            borderColor: "#000",
            pointRadius: 0,
            pointHoverRadius: 0,
            borderWidth: 2,
            fill: true,
          },
        ],
      },

      options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: false,
        interaction: { mode: "index", intersect: false, axis: "x" },
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: label || "",
            },
          },
          x: {
            ticks: {
              autoSkip: true,
              maxTicksLimit: 6,
            },
          },
        },
        plugins: {
          legend: { display: false },
          tooltip: { cornerRadius: 0 },
          title: {
            display: true,
            text: label || "",
            // align: "start",
            fullSize: true,
            font: { size: 18, weight: "normal" },
          },
        },
      },
    });

    // Mark as initialized to avoid double-instantiation
    canvas.dataset.initialized = "1";
  }
</script>

<style>
  .lc-figure {
    margin: 0;
  }
  .lc-caption {
    margin: 0 0 var(--space-2);
    color: var(--fg);
    font-family: var(--font-monospace);
    font-weight: 600;
    letter-spacing: -0.005em;
    font-size: clamp(0.95rem, 0.6vw + 0.8rem, 1.15rem);
  }
  .chart-container {
    position: relative;
    width: 100%;
    height: var(--height, 240px);
  }
  canvas {
    width: 100% !important;
    height: 100% !important;
  }
  /* Terminal-like external tooltip */
  .chartjs-terminal-tooltip {
    position: absolute;
    transform: translate(-50%, -110%);
    pointer-events: none;
    background: var(--bg);
    color: var(--fg);
    border: 1px solid var(--fg);
    font-family: var(--font-monospace);
    font-size: 12px;
    padding: 2px 6px;
    white-space: nowrap;
    opacity: 0;
  }
  .chartjs-terminal-tooltip.show {
    opacity: 1;
  }
</style>
