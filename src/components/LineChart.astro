---
export interface Props {
  data: Array<Record<string, unknown>>;
  x: string;
  y: string;
  label?: string;
  cid?: string;
}

const {
  data = [],
  x,
  y,
  label = "Series",
  cid: passedCid,
} = Astro.props as Props;

// Unique chart id per component instance
const cid = passedCid ?? `linechart-${Math.random().toString(36).slice(2, 10)}`;

// Stable in-page anchor id derived from label or `y`
const slugify = (s: string) =>
  s
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/(^-|-$)/g, "");
const anchorId = slugify(label || y);

const labels = (Array.isArray(data) ? data : [])
  .map((d) => (d && typeof d === "object" ? (d as any)[x] : undefined))
  .filter((v) => v !== undefined);

const values = (Array.isArray(data) ? data : []).map((d) => {
  const v = d && typeof d === "object" ? (d as any)[y] : undefined;
  if (v === undefined || v === null) return null;
  const n = Number(v);
  return Number.isFinite(n) ? n : null;
});
---

<figure id={anchorId} class="lc-figure">
  {
    label && (
      <figcaption class="lc-caption">
        <a href={`#${anchorId}`} class="lc-caption-link" aria-label={`${label} permalink`}>{label}</a>
        <a href={`#${anchorId}`} class="h-anchor" aria-label={`${label} anchor`}>#</a>
      </figcaption>
    )
  }
  <div class="chart-container">
    <canvas
      data-cid={cid}
      data-x={JSON.stringify(labels)}
      data-y={JSON.stringify(values)}
      data-label={label}
    >
    </canvas>
  </div>
</figure>

<script>
  import Chart from "chart.js/auto";
  // Date adapter for Chart.js time scale
  import "chartjs-adapter-date-fns";

  // Initialize all LineChart canvases on the page
  const canvases = Array.from(
    document.querySelectorAll(
      "canvas[data-cid][data-x][data-y]:not([data-initialized])",
    ),
  ) as HTMLCanvasElement[];

  Chart.defaults.font.family = "JetBrains Mono, monospace";

  // Hardcoded colors (simple, neutral defaults)
  const lineColor = "rgba(17, 17, 17, 0.95)"; // near-black line
  const gridColor = "rgba(17, 17, 17, 0.15)"; // subtle grid
  const tickColor = "rgba(17, 17, 17, 0.75)"; // dark gray ticks
  const tooltipBg = "rgba(255, 255, 255, 0.98)"; // light tooltip bg
  const tooltipFg = "rgba(17, 17, 17, 0.95)"; // dark tooltip fg

  for (const canvas of canvases) {
    const x = JSON.parse(canvas.dataset.x || "[]");
    const y = JSON.parse(canvas.dataset.y || "[]");
    const label = canvas.dataset.label || undefined;

    // Assume `x` is always a date string in YYYY-MM-DD
    const points = (Array.isArray(x) ? x : []).map((xi: string, i: number) => ({
      x: xi,
      y: y[i],
    }));

    new Chart(canvas as any, {
      type: "line",
      data: {
        datasets: [
          {
            label: label || undefined,
            data: points,
            borderColor: lineColor,
            backgroundColor: lineColor,
            borderWidth: 1.5,
            pointRadius: 0,
            pointHoverRadius: 0,
            tension: 0.25,
            spanGaps: true,
            fill: false,
          },
        ],
      },

      options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: false,
        interaction: { mode: "index", intersect: false, axis: "x" },
        scales: {
          y: {
            beginAtZero: true,
            border: { display: false },
            grid: {
              color: gridColor,
              drawOnChartArea: true,
            },
            ticks: {
              color: tickColor,
              maxTicksLimit: 5,
              padding: 4,
            },
          },
          x: {
            type: "time",
            time: {
              unit: "day",
              tooltipFormat: "PP",
              displayFormats: {
                hour: "HH:mm",
                day: "MMM d",
                month: "MMM yyyy",
                year: "yyyy",
              },
            },
            border: { display: false },
            grid: { display: false },
            ticks: {
              color: tickColor,
              autoSkip: true,
              maxTicksLimit: 6,
              maxRotation: 0,
              minRotation: 0,
              padding: 4,
            },
          },
        },
        plugins: {
          legend: { display: false },
          tooltip: {
            intersect: false,
            displayColors: false,
            backgroundColor: tooltipBg,
            borderColor: tooltipFg,
            borderWidth: 1,
            titleColor: tooltipFg,
            bodyColor: tooltipFg,
            cornerRadius: 0,
            padding: 6,
            callbacks: {
              label: (ctx) => {
                const v = ctx.parsed?.y;
                return typeof v === "number" ? v.toString() : "";
              },
            },
          },
          title: { display: false },
          decimation: { enabled: true, algorithm: "min-max" },
        },
      },
    });

    // Mark as initialized to avoid double-instantiation
    canvas.dataset.initialized = "1";
  }
</script>

<style>
  .lc-figure {
    margin: 0;
    /* Ensure deep links scroll to a comfortable position */
    scroll-margin-top: var(--space-6);
  }
  .lc-caption {
    margin: 0 0 var(--space-2);
    color: var(--fg);
    font-family: var(--font-monospace);
    font-weight: 600;
    letter-spacing: -0.005em;
    font-size: clamp(0.95rem, 0.6vw + 0.8rem, 1.15rem);
  }
  .lc-caption-link {
    text-decoration: none;
  }
  .lc-caption-link:hover,
  .lc-caption-link:focus {
    text-decoration: underline;
  }
  /* Compact # link: close spacing, hidden by default, never underlined */
  .lc-caption .h-anchor {
    margin-left: 0.2em;
    color: var(--muted);
    opacity: 0;
    text-decoration: none; /* override global anchor underline */
    transition: opacity 120ms ease-in-out;
  }
  .lc-caption:hover .h-anchor,
  .lc-caption .h-anchor:focus-visible {
    opacity: .8;
  }
  .chart-container {
    position: relative;
    width: 100%;
    height: var(--height, 240px);
  }
  canvas {
    width: 100% !important;
    height: 100% !important;
  }
</style>
